CS32 PROJECT 2
Christian Yu
104785497
CS32-2 w/ Smallberg


=====----- DOUBLY-LINKED LIST IMPLEMENTATION -----=====
To implement a doubly-linked list in my Sequence class, a private Node struct
was created. This Node object contains:
-	an ItemType object:			the current value of the object
-	a pointer to a Node:		points to the next Node
-	a pointer to a Node:		points to the previous Node
Following each pointer to next or previous Node objects traverses the Sequence.


=====----- ALGORITHM PSEUDOCODE -----=====
Sequence::Sequence(const Seqeunce& old)					//copy constructor
	initialize as empty
	create pointer to the head of old Sequence
	for each pointer in old Sequence
		insert value at pointer into current Sequence at end
		move pointer to next pointer in old

Sequence& Sequence::operator=(const Sequence& other)	//assignment operator
	if other does not point to this Sequence
		clear the current Sequence, set to empty
		create pointer to head of other Sequence
		for each pointer in old Sequence
			insert value at pointer into current Sequence at end
			move pointer to next pointer in other
	return this Sequence
	
bool Sequence::insert(int pos, const ItemType& value)	//insert value at position
	if pos is not in bounds
		return false, exit function with no changes
	create Node pointer p, unassigned
	if pos is at the start
		set pointer p to head of Sequence
		set head pointer to a new Node with the given value
		insert new head pointer behind p
		if the Sequence was previously empty
			set tail Node pointer to this new head
	else if pos is at the end
		set pointer p to tail of Sequence
		set tail pointer to new Node with given value
		insert new tail Node after pointer p
	else
		create new Node with the given value
		if pos is closer to start than finish
			iterate through Sequence to reach pos-1 from head
		else
			iterate through Sequence from tail
		insert new Node with value after pointer p
	increase size by 1
	return true
	
int Sequence::insert(const ItemType& value)
	if empty
		insert value at position 0 (using above function)
	create int pos
	create new pointer p to head
	until value at p is not less than given value
		increase pos by 1
		point p to next pointer in Sequence
	if at the end
		insert value at end position (using above function, size increase by 1)
	else if at start
		insert value at position 0 (using above func)
	else
		insert value at found position (using above func)
	return pos
	
bool Sequence::erase(int pos)
	if pos is out of bounds
		return false
	reduce size by 1
	create pointer p set to head or tail depending on proximity to pos
	if only one item in Sequence
		set head and tail to empty
	else if pos is 0
		set head to its forward Node pointer
		set new head backward pointer to null
	else if pos is at the end
		set tail to its backward Node pointer
		set new tail forward pointer to null
	else
		iterate forwards or backwards if p is head or tail, respectively, reach pos
		connect the forwards of p to the backwards of p and vice versa
	delete Node at p
	return true
	
int Sequence::remove(const ItemType& value)
	create int removed, pos
	create new pointer p at tail
	iterating through Sequence backwards, for each Node
		if value at p is equal to given value
			set p to its backward pointer
			erase Node at position pos
			removed increment by 1
		else
			set p to its backward pointer
		pos decrement by 1
	return removed
	
bool Sequence::get(int pos, ItemType& value) const
	if pos is out of bounds
		return false
	create pointer p set to head or tail depending on proximity to pos
	iterate forwards or backwards if p is head or tail, respectively, reach pos
	set given value to value at pointer p
	return true
	
bool Sequence::set(int pos, const ItemType& value)
	if pos is out of bounds
		return false
	create pointer p set to head or tail depending on proximity to pos
	iterate forwards or backwards if p is head or tail, respectively, reach pos
	set value at pointer p to given value
	return true
	
int Sequence::find(const ItemType& value) const
	create int pos
	iterate through Sequence from head, for each Node
		if value at p is equal to given value	
			return pos
		pos increment by 1
	return -1, not found
	
void Sequence::swap(Sequence& other)
	create temporary Sequence, copy of other
	set other to this
	set this to temporary Sequence

int subsequence(const Sequence& seq1, const Sequence& seq2)
	if seq2 is empty or seq2 is larger than seq1
		return -1
	iterate through seq1
		if first item in seq2 matches current value
			if the rest of seq2 is found sequentially after
				return current index in seq1
	return -1

void interleave(const Sequence& seq1, const Sequence& seq2, Sequence& result)
	create an empty sequence r
	if seq2 is larger than seq1
		set r to seq2
		insert every value in seq1 into every other position in r, starting at 0
	else
		set r to seq1
		insert every value in seq2 into every other position in r, starting at 1
	set result to r
		
	
=====----- TEST DATA -----=====
	
	//The following two functions are placed to streamline the test process
	//It is assumed that these functions work as described for the following tests
	void dumpSequence(const Sequence& s);
	//	prints out the Sequence in sequential order and its size
	//	since it utilizes the following public functions in Sequence
	//	Sequence::get(int pos, ItemType&)
	//	Sequence::size()
	//	it also tests the functionality of these functions as well
	
	void emptySequence(Sequence& s);
	//	sets s to empty Sequence
	
	int main()
	{	
		ItemType testing;							//Need something to Sequence::get(int, ItemType&) to

		Sequence s1;
		Sequence s2(s1);							//copy constructor of empty Sequence

		assert(s1.empty() && s2.empty());			//test that constructed Sequences are initialized empty

		assert(s1.insert("a") == 0);				//test that the following items are inserted in
		assert(s1.insert("b") == 1);				//correct positions, inserted out of alphabetical order
		assert(s1.insert("f") == 2);
		assert(s1.insert("c") == 2);
		assert(s1.insert(1, "d"));					//test that forced insertion Sequence::insert(int, const ItemType&) works
		assert(!s1.insert(6, "not inserted"));		//test that out of bounds Sequence::insert(int, const ItemType&) returns fail code
		
		dumpSequence(s1);
		//OUTPUT SHOULD BE:
		//Size: 5
		//{a, d, b, c, f}
		
		Sequence copyTest(s1);						//test that the copy constructor works for Sequences with items
		dumpSequence(copyTest);
		//OUTPUT SHOULD BE:
		//Size: 5
		//{a, d, b, c, f}

		assert(s1.find("d") == 1);					//test that "d" is in the correct position, also tests that Sequence::find(const ItemType&)
		assert(s1.find("z") == -1);					//test that some string that wasn't even mentioned is not in the Sequence
		assert(s1.find("a") == 0);					//test that "a" is in the correct position
		assert(s1.find("b") == 2);					//test that "b" is in the correct position
		assert(s1.find("not inserted") == -1);		//test that "not inserted" was not inserted due to error bounds
		assert(s1.find("f") == s1.size() - 1);		//test that "f" is last, as it is alphabetically last

		assert(s2.insert("rocks") == 0);			//test that inserting into empty string returns 0 position
		assert(s2.insert("hills") == 0);			//test that "hills" is placed before "rocks"
		assert(s2.insert(0, "ziggurat"));			//test that forced insertion works, unalphabetical)
		
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 3
		//{ziggurat, hills, rocks}
		
		copyTest = s2;								//test that assignment operator works for Sequences with items
		dumpSequence(copyTest);
		//Size: 3
		//{ziggurat, hills, rocks}

		s1.swap(s2);								//test that Sequence::swap(Sequence&) works
		dumpSequence(s1);
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 3
		//{ziggurat, hills, rocks}
		//Size: 5
		//{a, d, b, c, f}

		assert(!(s1.empty() || s2.empty()));		//test that neither are empty

		assert(s2.insert(0, "f"));					//insert 4 "f" strings
		assert(s2.insert(0, "f"));
		assert(s2.insert(0, "f"));
		assert(s2.insert(0, "f"));
		assert(s2.remove("f") == 5);				//test that Sequence::remove(const ItemType&) returns # removed
		assert(s2.size() == 4);						//test that they have been removed
		
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 4
		//{a, d, b, c}

		emptySequence(s2);							//empty for later test
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 0
		//{}
		
		assert(s2.empty());							//confirm that s2 is empty

		s2.swap(s1);								//confirm swapping works with empty Sequences
		dumpSequence(s1);							//Sequence::swap(Sequence&) makes use of operator= and copy constructor
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 0
		//{}
		//Size: 3
		//{ziggurat, hills, rocks}

		assert(!s1.get(0, testing) && testing=="");	//confirm that Sequence::get(int pos, ItemType&) does not work on empty Sequence
		assert(s2.set(0, "ziggyrut"));				//see if Sequence::set(int pos, const ItemType&) works
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 3
		//{ziggyrut, hills, rocks}

		emptySequence(s2);							//series of insertions for next test of aux functions
		ItemType stuff1[10] = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" };
		ItemType stuff2[10] = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j" };
		for (int i = 0; i < 10; i++)
			assert(s1.insert(s1.size(), stuff1[i]));
		for (int i = 0; i < 10; i++)
			assert(s2.insert(s2.size(), stuff2[i]));
		dumpSequence(s1);
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 10
		//{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
		//Size: 10
		//{a, b, c, d, e, f, g, h, i, j}
		
		assert(subsequence(s1, s2) == -1);			//confirm no subsequence exists, test fail case

		Sequence result;							//create new Sequence to test interleave(const Seqeunce&, const Seqeunce&, Seqeunce&)
		interleave(s1, s2, result);	
		dumpSequence(result);
		//OUTPUT SHOULD BE:
		//Size: 20
		//{1, a, 2, b, 3, c, 4, d, 5, e, 6, f, 7, g, 8, h, 9, i, 0, j}

		interleave(s2, s1, s2);						//test using same Sequences at third argument
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 20
		//{a, 1, b, 2, c, 3, d, 4, e, 5, f, 6, g, 7, h, 8, i, 9, j, 0}

		assert(s2.erase(4));						//test that erasing specific position works
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 19
		//{a, 1, b, 2, 3, d, 4, e, 5, f, 6, g, 7, h, 8, i, 9, j, 0}
		
		s2.erase(17);
		dumpSequence(s2);
		//OUTPUT SHOULD BE:
		//Size: 18
		//{a, 1, b, 2, 3, d, 4, e, 5, f, 6, g, 7, h, 8, i, 9, 0}

		s2.get(16, testing);						//thoroughly test get and set function
		assert(testing == "9");						//test that the correct value was retrieved
		s2.set(13, testing);
		s2.get(13, testing);
		assert(testing == "9");						//test that the correct value @ position was retrieved
		s2.set(4, testing);							//etc.
		s2.get(4, testing);
		s2.set(0, testing);
		s2.set(s2.size() - 1, testing);
		assert(testing == "9");

		dumpSequence(s2);							//see if set worked
		//OUTPUT SHOULD BE:
		//Size: 18									//unchanged size
		//{9, 1, b, 2, 9, d, 4, e, 5, f, 6, g, 7, 9, 8, i, 9, 9}
		
		emptySequence(s2);							//the following sets are reinserted into s2 to test subsequence
		ItemType stuff3[4] = { "2", "3", "4", "5", };
		for (int i = 0; i < 4; i++)
			assert(s2.insert(s2.size(), stuff3[i]));
			
		assert(subsequence(s1, s2) == 1);			//test that the sequence is found here

		emptySequence(s2);
		ItemType stuff4[5] = { "7", "8", "9", "0", "not at the end"};
		for (int i = 0; i < 5; i++)
			assert(s2.insert(s2.size(), stuff4[i]));
			
		assert(subsequence(s1, s2) == -1);			//testing to see if subsequence doesn't run off the end
	}